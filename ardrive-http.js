"use strict";let retryStatusCodes=[408,429,440,460,499,500,502,503,504,520,521,522,523,524,525,527,598,599];const isStatusCodeError=e=>e>=400&&e<=599,retryDelay=(e,t)=>t*Math.pow(1.5,e),logMessage=(e,t,r,n)=>`uri: ${e}
  response: Http status error [${t}]: ${r}
  retryAttempts: ${n}`,logger={retry:(e,t,r,n)=>{const a=logMessage(e,t,r,n);console.warn(`Network Request Retry
${a}`)},error:(e,t,r,n)=>{const a=logMessage(e,t,r,n);console.error(`Network Request Error
${a}`)}},requestType={json:{contentType:"application/json; charset=utf-8",getResponse:async e=>await e.json()},bytes:{contentType:"application/octet-stream",getResponse:async e=>await e.arrayBuffer()},text:{contentType:"plain/text; charset=utf-8",getResponse:async e=>await e.text()}},get=async([e,t,r,n,a=!1,c=0])=>{try{const o=await fetch(e,{method:"GET",redirect:"follow"}),s=o.status,i=o.statusText;if(r>0&&retryStatusCodes.includes(s))return a||logger.retry(e,s,i,c),await get([e,t,r-1,n,a,c+1]);if(isStatusCodeError(s))return{error:`Network Request Error
${logMessage(e,s,i,c)}`,retryAttempts:c};const u=await requestType[`${t}`].getResponse(o);return{statusCode:s,statusMessage:i,data:u,retryAttempts:c}}catch(o){return console.error(o),console.error(o.stack),{error:`${o}`,retryAttempts:c}}},post=async([e,t,r,n,a,c,o=!1,s=0])=>{try{const i=await fetch(e,{method:"POST",headers:{...r!==requestType.text.contentType?{"Content-Type":r}:{}},redirect:"follow",body:t}),u=i.status,p=i.statusText;if(a>0&&retryStatusCodes.includes(u))return o||logger.retry(e,u,p,s),await post([e,t,r,n,a-1,c,o,s+1]);if(isStatusCodeError(u))return{error:`Network Request Error
${logMessage(e,u,p,s)}`,retryAttempts:s};const y=await requestType[`${n}`].getResponse(i);return{statusCode:u,statusMessage:p,data:y,retryAttempts:s}}catch(i){return{error:`${i}`,retryAttempts:s}}};self.get=get,self.post=post;
